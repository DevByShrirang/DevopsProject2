pipeline {
    agent any

    parameters {
        string(name: 'DOCKER_IMAGE_NAME', defaultValue: 'amazon-prime', description: 'Enter Docker image name')
        string(name: 'DOCKERHUB_USER', defaultValue: 'shrirang451', description: 'Enter Docker Hub username')
    }

    tools {
        jdk 'JDK'
        nodejs 'NodeJS'
    }

    environment {
        SCANNER_HOME = tool 'SonarQube Scanner'
    }

    stages {

        stage('1. Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/DevByShrirang/DevopsProject2.git'
            }
        }

        stage('2. SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh """
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=${params.DOCKER_IMAGE_NAME} \
                        -Dsonar.projectKey=${params.DOCKER_IMAGE_NAME}
                    """
                }
            }
        }

        stage('3. Quality Gate') {
            steps {
                timeout(time: 1, unit: 'MINUTES') {
                    script {
                        def qualityGate = waitForQualityGate()
                        echo "Quality Gate status: ${qualityGate.status}"
                        // if (qualityGate.status != 'OK') { error "Quality Gate failed" }
                    }
                }
            }
        }

        stage('4. Install npm') {
            steps {
                sh 'npm install'
            }
        }

        stage('5. Trivy Scan') {
            steps {
                sh 'trivy fs . > trivy.txt'
                archiveArtifacts artifacts: 'trivy.txt', fingerprint: true
            }
        }

        stage('6. Check Required Files') {
            steps {
                sh '''
                    if [ ! -f Dockerfile ]; then
                        echo "Dockerfile not found!"
                        exit 1
                    fi
                    echo "All required files are present. Proceeding..."
                '''
            }
        }

        stage('7. Build Docker Image') {
            steps {
                sh "docker build -t ${params.DOCKER_IMAGE_NAME} ."
            }
        }

        stage('8. Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        def imageName = "${params.DOCKER_IMAGE_NAME}"
                        def dockerhubImage = "${DOCKER_USER}/${imageName}"

                        sh """
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                            docker tag ${imageName} ${dockerhubImage}:latest
                            docker push ${dockerhubImage}:latest
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed. Check console output or Docker Hub for results.'
        }
    }
}
